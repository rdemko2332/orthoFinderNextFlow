#!/usr/bin/perl

use strict;
use Getopt::Long;

=pod

=head1 Description

This process is done per organism. Using the N0.tsv group file produced by orthofinder, and the sequence and species files from orthofinder (that contain the sequence, internal mapping pair), create an ortholog file containing sequences and their group assignments. Also, create a singleton file for sequences not assigned to a group.

=head1 Input Parameters

=over 4

=item species_mapping

The file containing the internal species mapping from orthofinder

=back

=over 4

=item sequence_mapping

The file containing the internal sequence mapping from orthofinder

=back

=over 4

=item ortholog_groups

The N0.tsv groups file produced by orthofinder

=back

=over 4

=item species 

The species proteome

=back

=over 4

=item output_file_suffix

Files will be named by group internal id. The suffix for the ortholog group files is set here.

=back

=over 4

=item singletons_file_suffix

Files will be named by group internal id. The suffix for the singleton group files is set here.

=back

=over 4

=item build_version

Integer describing build version of omcl 

=back

=cut

my ($speciesMapping, $sequenceMapping, $outputFileSuffix, $orthologGroups, $species, $singletonsFileSuffix, $orthologGroupsFileWithSingletons, $buildVersion);

&GetOptions("species_mapping=s" => \$speciesMapping, # Species Mapping file Ex: 0: ahos.fasta
            "sequence_mapping=s" => \$sequenceMapping, # Sequence mapping file Ex: 0_0: ahos|F4B612 gene=F4B612 product=Uncharacterized protein
            "species=s" => \$species, # Species that we are currently splitting Ex: ahos.fasta
            "ortholog_groups=s" => \$orthologGroups, # N0.tsv file produced by orthofinder. Lists groupID and sequences in that group
            "output_file_suffix=s" => \$outputFileSuffix, # orthologs
            "singletons_file_suffix=s" => \$singletonsFileSuffix, # singletons 
            "build_version=s" => \$buildVersion, # Integer indicating build. Is appended to group ids that are output 
           );


my $orthoGroupPrefix = "OG";

my %speciesMap = &makeSpeciesMap($speciesMapping);

my $internalSpecies = $speciesMap{$species};
print "$internalSpecies\n";

unless(defined $speciesMap{$species}) {
    die "Species $species not found in species mapping file";
}

my %sequenceMapping = &makeSequenceMapping($sequenceMapping, $internalSpecies);


my $outputFile = "${internalSpecies}.${outputFileSuffix}";
my $singletonsFile = "${internalSpecies}.${singletonsFileSuffix}";
print "$singletonsFile\n";

open(OUT, ">$outputFile") or die "Cannot open output file $outputFile for writing: $!";

open(GROUP, $orthologGroups) or die "Cannot open file $orthologGroups for reading: $!";

# Retrieve header line from orthogroups file (output from orthofinder). Ex: HOG\tOG\tGene\tTree\tParent\tClade\tahos\tapis
my $header = <GROUP>;
chomp $header;

my $index = 0;

# Create a hash. Holds each header column paired with an index. Ex: HOG => 0, OG => 1
my %headerMap = map { $_ => $index++} split(/\t/, $header);

# Get index of OG column
my $ogIndex = $headerMap{$orthoGroupPrefix};

# Get the species name from the species argument Ex: ahos.fasta => ahos
my $speciesNoFileSuffix = $species;
$speciesNoFileSuffix =~ s/.fasta$//;

# Get index of species
my $speciesIndex = $headerMap{$speciesNoFileSuffix};

unless($speciesIndex) {
    die "Could not map species $species to ortholog group file header";
}

my %seenSequences;

while(<GROUP>) {
    chomp;
    my @line = split(/\t/, $_);

    my $orthologGroup = $line[$ogIndex];

    # change the orthologGroup id to add some version
    # replace "OG" with "OG${version}_"
    $orthologGroup =~ s/^${orthoGroupPrefix}(\d+)/${orthoGroupPrefix}${buildVersion}_$1/;

    # Retrieve string of all sequences in orthogroup for this species
    my $speciesField =  $line[$speciesIndex];

    # Split this up into an array
    my @speciesList = split(/, /, $speciesField);

   foreach my $ogSequence (@speciesList) {
   
        my $internalSequence = $sequenceMapping{$ogSequence};

        unless($internalSequence) {
            die "Cannot map ortholog group file sequence $ogSequence";
        }

        print OUT "$orthologGroup\t$internalSequence\n";

        $seenSequences{$ogSequence}++;
    }

}

close GROUP;
close OUT;

# Print out singletons

print "$singletonsFile\n";
&printSingletons($singletonsFile, \%sequenceMapping, \%seenSequences);

# ============================= Subroutines =========================================

=pod

=over 4

=item makeSpeciesMap

Creates a species map, mapping the actual species name and the internal id generated by orthofiner Ex: 0: ahos.fasta -> $speciesMap{ahos.fasta} = 0

=back

=cut

sub makeSpeciesMap {
    my ($speciesMapping) = @_;
    open(SPECIES, $speciesMapping) or die "Cannot open file $speciesMapping for reading: $!";
    my %speciesMap;
    while(<SPECIES>) {
        chomp;
        my ($internal, $name) = split(/: /, $_);
        $speciesMap{$name} = $internal;
    }
    close SPECIES;
    return %speciesMap;
}

=pod

=head1 Subroutines

=over 4

=item makeSequenceMapping

Creates a sequence map, mapping the actual sequence name and the internal id generated by orthofinder. Ex: 0_0: ahos|F4B612 gene=F4B612 product=Uncharacterized protein -> $sequenceMapping{ahos|f4B612} = 0_0

=back

=cut

sub makeSequenceMapping {
    my ($sequenceMapping, $internalSpecies) = @_;
    open(SEQ, $sequenceMapping) or die "Cannot open file $sequenceMapping for reading: $!";
    my %sequenceMapping;
    while(<SEQ>) {
        chomp;
        next unless(/^${internalSpecies}_/);
        my ($internal, $name) = split(/: /, $_);
        my @n = split(/ /, $name);
        $sequenceMapping{$n[0]} = $internal;
    }
    close SEQ;
    return %sequenceMapping;
}

=pod

=over 4

=item printSingletons

Prints out singleton sequence to their own group

=back

=cut

sub printSingletons {
    my $singletonsFile = $_[0];
    my %sequenceMapping = %{ $_[1] };
    my %seenSequences = %{ $_[2] };
    open(SINGLETONS, ">$singletonsFile") or die "Cannot open file $singletonsFile for writing: $!";
    # For evert sequence in sequence mapping
    foreach my $seqName (keys %sequenceMapping) {
	# That has not be seen before
        next if($seenSequences{$seqName});
        my $internalSeq = $sequenceMapping{$seqName};
        print SINGLETONS "$internalSeq\n";
    }
    close SINGLETONS;
}
